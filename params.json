{"name":"Chilimatic-framework","tagline":"","body":"# chilimatic-framework\r\n\r\nthis is for feedback :) fork it, use it if you find something usefull steal it :)\r\nlet me know what you think about it\r\n\r\n# Config\r\nit's a domain based system for the configuration\r\n* *.cfg\r\n* *.example.com.cfg\r\n* subdomain.example.com.cfg\r\n\r\nthe *.cfg is the root configuration it will be the first setting overwritten by *.example.com this will \r\nbe overwritten by the subdomain.example.com.cfg\r\n\r\nas example\r\n\r\n***\r\n\r\n```\r\n   use \\chilimatic\\lib\\config\\Config;\r\n   Config::getInstance(\r\n   [\r\n      'type' => 'File',\r\n      <path/to/folder/withconfigfiles>\r\n   ]\r\n   );\r\n```\r\n\r\ncontent of the *.cfg\r\n```\r\n   # page settings\r\n   default_timezone = 'Europe/Vienna'\r\n   default_page_encoding = 'utf-8'\r\n\r\n   #cache settings\r\n   cache_type = 'memcached'\r\n   cache_settings = { \"server_list\" : [{\"host\" : \"127.0.0.1\", \"port\" : \"11211\", \"weight\" : 1 }] }\r\n\r\n   #Session data\r\n   session_type = \"Cache\"\r\n   session_cache = 'Memcached'\r\n```\r\ncontent of *.example.com\r\n```\r\nsession_type = \"Mysql\"\r\n```\r\nso the if you use on the domain example.com\r\n```\r\nConfig::get('session_type'); // returns Mysql\r\nConfig::get('cache_settings') // return \\stdClass containing the json \r\n```\r\n\r\nthis is a simple example how to use the config object\r\n\r\n# DI \r\nso let's think about the service collection the default service collection can be found at\r\n```\r\nlib/general/config/default-service-collection.php\r\n```\r\nthis is just ment as an example. I took the closure approach so it's easier to add a service\r\nas an example\r\n```\r\n    $dispatcher = \\chilimatic\\lib\\di\\ClosureFactory::getInstance(\r\n        realpath('<path to your closure collection>');\r\n    );\r\n    // set a db object\r\n    $dispatcher->set('db', function() use ($dispatcher) {\r\n        $config = $dispatcher->get('config');\r\n\r\n        $mysqlStorage = new \\chilimatic\\lib\\database\\mysql\\MysqlConnectionStorage();\r\n        $mysqlStorage->addConnection(\r\n            $config->get('mysql_db_host'),\r\n            $config->get('mysql_db_user'),\r\n            $config->get('mysql_db_password'),\r\n            $config->get('mysql_db_name'),\r\n            null\r\n        );\r\n\r\n        return $mysqlStorage;\r\n    });\r\n   \r\n    $dispatcher->set('entity-manager', function() use ($dispatcher) {\r\n        $mysqlStorage = $dispatcher->get('db');\r\n        $master = $mysqlStorage->getConnection(0);\r\n        $queryBuilder = $dispatcher->get('query-builder', ['db' => new \\chilimatic\\lib\\database\\mysql\\Mysql($master)]);\r\n\r\n        $em = new \\chilimatic\\lib\\database\\orm\\EntityManager(\r\n            new \\chilimatic\\lib\\database\\mysql\\Mysql($master),\r\n            $queryBuilder\r\n        );\r\n        return $em;\r\n    });\r\n\r\n\r\n    // get a new instance \r\n    $dispatcher->get('db', []);\r\n    // get it as \"singelton\"\r\n    $dispatcher->get('em', [], true);\r\n```\r\n\r\nbut lets start with a basic application example so you can try it out.\r\nYou create the \"basic\" structure\r\n```\r\n<path>\r\n - app\r\n   - config\r\n     - *.cfg\r\n     - *.example.com.cfg\r\n     - www.example.com.cfg\r\n   - module\r\n     - main [default]\r\n       - controller\r\n         - Index.php\r\n       - view\r\n         - index.phtml\r\n - public [Docroot]\r\n   - index.php\r\n - vendor/chilimatic/framework/lib [framework]\r\n```\r\ncontent of public/index.php\r\n```\r\n<?php\r\n\r\nrequire_once '../vendor/autoload.php';\r\n\r\ndefine('APPLICATION_PATH', realpath('../'));\r\n\r\ntry {\r\n    use chilimatic\\lib\\config\\Config;\r\n\r\n    date_default_timezone_set('Europe/Vienna');\r\n    define('INCLUDE_ROOT', '/var/www/chilimatic.com' );\r\n\r\n    set_exception_handler(function($e)\r\n    {\r\n        echo $e->getMessage();\r\n        echo $e->getTraceAsString();\r\n    });\r\n    \r\n    $dispatcher = \\chilimatic\\lib\\di\\ClosureFactory::getInstance(\r\n        realpath('../app/config/serviceCollection.php')\r\n    );\r\n\r\n    /**\r\n     * Create the config\r\n     */\r\n    $config = $dispatcher->get('config', [\r\n        'type' => 'File',\r\n        \\chilimatic\\lib\\config\\File::CONFIG_PATH_INDEX => INCLUDE_ROOT . '/app/config/'\r\n    ]);\r\n\r\n    /**\r\n     * Set default timezone based on the config\r\n     */\r\n    date_default_timezone_set((string) $config->get('default_timezone'));\r\n\r\n    if (!$config->get((string) 'document_root')) {\r\n        $config->set((string) 'document_root', (string) INCLUDE_ROOT);\r\n    }\r\n\r\n    $config->set('app_root', (string) $config->get('document_root') . (string) \"/app\");\r\n    $config->set('lib_root', (string) $config->get('document_root') . (string) $config->get('lib_dir' ));\r\n    \r\n    $application = new \\chilimatic\\lib\\application\\HTTPMVC($dispatcher, $dispatcher->get('config'));\r\n    // this is step so people can inject\r\n    $application->init();\r\n    // returns the rendered result\r\n    echo $application->getHandler()->getContent();\r\n}\r\ncatch (Exception $e)\r\n{\r\n    // show error trace\r\n    if (isset($dispatcher) && $dispatcher->get('error-handler', null, true)->getClient()->showError()) {\r\n        $dispatcher->get('error-handler', null, true)->getClient()->log($e->getMessage(), $e->getTraceAsString())->send();\r\n    } else {\r\n        echo 'nothing to concern you with :)';\r\n    }\r\n``` \r\ncontent of app/module/main/controller/Index.php\r\n```\r\nnamespace chilimatic\\app\\module\\main\\controller;\r\n\r\n/**\r\n * Class Index\r\n * @package \\chilimatic\\app\\default\\controller\r\n */\r\nclass Index\r\n{\r\n    /**\r\n     * Class Index\r\n     * @view \\chilimatic\\lib\\view\\PHtml()\r\n     */\r\n    public function indexAction(){\r\n        $this->view->pageTitle = 'myPage';\r\n    }\r\n}\r\n```\r\ncontent of app/module/main/view/index.phtml\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n<head lang=\"en\">\r\n    <meta charset=\"UTF-8\" />\r\n    <title><?php echo $this->pageTitle; ?></title>\r\n</head>\r\n<body></body>\r\n</html>\r\n```\r\n\r\n\r\n# DataStructures\r\nNormal \"Nodes\"\r\n\r\n```\r\n$node = new \\chilimatic\\lib\\datastructure\\graph\\Node(null, '.', '');\r\n$node->addChild(new \\chilimatic\\lib\\datastructure\\graph\\Node($node, 'test', 23));\r\n$node->getChildren(); // return [\\chilimatic\\lib\\datastructure\\graph\\Node($node, 'test', 23)]\r\n$node->getLastByKey(\"test\"); // return \\chilimatic\\lib\\datastructure\\graph\\Node($node, 'test', 23)\r\n$node->getLastByKey(\"test\")->getData(); // return 23\r\n```\r\nBinary Tree\r\n```\r\n$bt = \\chilimatic\\lib\\datastructure\\graph\\tree\\binary\\BinaryTree();\r\n$bt->insert(\\chilimatic\\lib\\datastructure\\graph\\tree\\binary\\BinaryNode('key', [1,2,3]));\r\n$bt->insert(\\chilimatic\\lib\\datastructure\\graph\\tree\\binary\\BinaryNode('key1', [1,2,3]));\r\n\r\n$bt->findByKey('key1'); // returns \\chilimatic\\lib\\datastructure\\graph\\tree\\binary\\BinaryNode('key1', [1,2,3])\r\n```\r\n\r\n# Session\r\nyou can easily implement your own session storage system\r\n```\r\n// uses memcached as session storage\r\n$session = new chilimatic\\lib\\session\\handler\\Session(\r\n                chilimatic\\lib\\session\\engine\\Factory::make('Cache', ['type' => 'memcached'])\r\n            );\r\n$session->set('value', 'data');\r\n$session->get('value'); // returns data\r\n```\r\n# Routing\r\npossible types are \r\n* stdclass\r\n* array numeric\r\n* array assoc\r\n* lambda function\r\n* function call\r\n* static content\r\n\r\nthe routing is store in binary trees so i hope it performs\r\nyou can always fallback to the common routing\r\n\r\n```\r\n \\chilimatic\\route\\Router::register('/test/(:num)', array('job', 'load'), '/');\r\n \\chilimatic\\route\\Router::register('/user/add/(:num)', array('object' => 'user', 'method' => 'add', 'namespace' => '\\\\user\\\\', 'param' => array(true, false)));\r\n \\chilimatic\\route\\Route::register('/test/(:char)', array('object' => 'user', 'method' => 'add', 'namespace' => '\\\\user\\\\', 'param' => array(true, false)));\r\n\\chilimatic\\route\\Route::register('/mytest/(:array)[|]',  function($num) { foreach($num as $val) {  echo $val . ': this is a test'; }});\r\n```\r\n\r\n# Caching\r\n\r\n```\r\n$cache = \\chilimatic\\lib\\cache\\engine\\CacheFactory::make('memcached', []);\r\n// this will get you a memcached I added a listing for memcached so you can actually see \r\n$cache->set('myData', [], $ttl = 10)\r\n$cache->listCache(); // returns ['myData', {'data'}]\r\n$cache->delete('myData'); // returns true\r\n$cache->listCache(); // returns []\r\n```\r\n\r\n\r\n#ORM / database\r\n```\r\n// you can have multiple connections in the storage -> if you just want to use pdo / mysqli\r\n$mysqlStorage = new \\chilimatic\\lib\\database\\mysql\\MysqlConnectionStorage();\r\n$mysqlStorage->addConnection('localhost','username', 'password', 'database';\r\n$master = $mysqlStorage->getConnection(0);\r\n\r\n// the entity manager\r\n$em = new \\chilimatic\\lib\\database\\orm\\EntityManager(new \\chilimatic\\lib\\database\\mysql\\Mysql($master));\r\n// the entityManager needs the corret QueryBuilder -> atm there is only MySQL supportet\r\n$queryBuilder = new \\chilimatic\\lib\\database\\orm\\querybuilder\\MysqlQueryBuilder();\r\n$queryBuilder->setCache(\\chilimatic\\lib\\di\\ClosureFactory::getInstance()->get('cache', ['type' => 'shmop']));\r\n$em->setQueryBuilder($queryBuilder);\r\n\r\n\r\n/**\r\n * Class Model\r\n *\r\n * @package \\app\\model\r\n */\r\nclass Model1 extends AbstractModel {\r\n\r\n    /**\r\n     * @var int\r\n     */\r\n    protected $id;\r\n\r\n    /**\r\n     * @var int\r\n     */\r\n    protected $model2_id;\r\n\r\n    /**\r\n     * maps it to the model2 id and adds the model here\r\n     * @ORM model2_id = \\Model2;\r\n     */\r\n    protected $model2;\r\n\r\n    /**\r\n     * @param int $id\r\n     */\r\n    public function setModel1($id) {\r\n        $this->model1 = (int) $id;\r\n    }\r\n\r\n    /**\r\n     * @param int $id\r\n     */\r\n    public function setModel2($id) {\r\n        $this->model2 = (int) $id;\r\n    }\r\n\r\n    /**\r\n     * @return array\r\n     */\r\n    public function jsonSerialize() {\r\n        return [\r\n          'id' => $id,\r\n          'model2_id' => $model2_id\r\n        ];\r\n    }\r\n}\r\n\r\n/**\r\n * Class Model2\r\n * @ORM table=database.anyTable;\r\n */\r\nclass Model2 extends AbstractModel {\r\n    /**\r\n     * @var int\r\n     */\r\n    protected $id;\r\n}\r\n// returns the model\r\n$model1 = $em->findOneBy(new Model1(), [\r\n    'id' => 1\r\n]);\r\n\r\n$model1->setModel2(3);\r\n$em->persist($model1); // updates the model\r\n\r\n\r\n// create a new entry\r\n$newModel = new Model1();\r\n$newModel->setModel1(2);\r\n$newModel->setModel2(3);\r\n\r\n// creates a new table entry\r\n$em->persist($newModel);  \r\n```\r\n\r\n\r\nThe whole Framework is mainly academic but if you find a nice app you wanna use it for or you just want see some concepts or give me some usefull feedback. I would be happy","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}